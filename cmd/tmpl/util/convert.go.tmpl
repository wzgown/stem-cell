package util

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"strings"

	"golang.org/x/text/encoding/simplifiedchinese"
	"golang.org/x/text/transform"
)

func GBKtoUTF8(in []byte) (string, error) {
	out, err := ioutil.ReadAll(transform.NewReader(bytes.NewReader(in), simplifiedchinese.GBK.NewDecoder()))
	if err != nil {
		return "", err
	}

	return string(out), nil
}

func UTF8toGBK(in string) ([]byte, error) {
	bys, err := ioutil.ReadAll(transform.NewReader(strings.NewReader(in), simplifiedchinese.GBK.NewEncoder()))
	if err != nil {
		return nil, err
	}

	return bys, nil
}

func GBKtoUTF8Panic(in []byte) string {
	out, err := GBKtoUTF8(in)
	if err != nil {
		panic(err)
	}

	return string(out)
}

func UTF8toGBKPanic(in string) []byte {
	bys, err := UTF8toGBK(in)
	if err != nil {
		panic(err)
	}

	return bys
}

// StrAmount 将以分为单位的整数形式的金额转换为字符串形式
// 如： 599  ->  5.99
func StrAmount(n int64) string {
	return fmt.Sprintf("%d.%02d", n/100, n%100)
}

// UnStrAmount 将字符串形式的金额转换为以分为单位的整数形式
// 如： 5.99  ->  599
func UnStrAmount(s string) int64 {
	if s == "" {
		return 0
	}

	var a, b int64
	tok := strings.Split(s, ".")
	if len(tok) == 1 {
		tok = append(tok, "00")
	} else if len(tok) > 2 {
		panic("invalid amount " + s)
	}

	a = int64(Atoi(tok[0]))
	b = int64(Atoi(tok[1]))

	return a*100 + b
}

func StrAdd(a, b string) string {
	return StrAmount(UnStrAmount(a) + UnStrAmount(b))
}
